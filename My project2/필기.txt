prefabs : 원본을 참고하여 복제품
을 양산할 수 있도록 따로 정의한 것

>> 게임 오브젝트를 에셋으로 만들어
주는 것

만드는 방법 : 씬에 있는 오브젝트를
Assets 폴더로 드래그하면 됩니다.

unpack : 프리팹을 푸는 기능
이때 프리팹 에셋이 삭제되는 것은 아니며
프리팹 인스턴스(instance)에만 영향을 줍니다.

인스턴스(instance)
어떠한 상황이나 행동 등 무언가를 특정한
형태로 만들어주는 것을 의미합니다.
c#에서는 예약어 new를 통한 생성을 의미합니다.

기존에 프리팹으로 설정된 오브젝트를 가지고
다시 프리팹으로 만들려고 할 경우

아래의 기능 중 하나를 선택합니다.

Original Prefab : 현재 형태로 새로운 프리팹을 생성

Prefab Variant : 기존의 프리팹을 상속받는 새로운
프리팹으로 생성합니다.(상속 기능)

ex) 특정 타겟을 설정할 때 일부 타겟을 대상으로
운반 기능 , 음향 효과 등을 내도록 따로 처리하는 경우


리소스 폴더
Resources

유니티에서 제공해주는 리소스에 대한 로드 폴더입니다.
리소스 폴더 안의 파일의 경로를 통해 접근할 수 있게
만들어줍니다.

장점 : 쓰기 쉬움.

단점 : 빌드 시에 포함되기 때문에 빌드 사이즈가 커짐.
        --> 앱 시작 시간이 길어짐.
        
        정해진 에셋 이름을 통해 로드를 진행하기 때문에
        이름 수정이 번거로움.

유니티에 존재하는 특수 폴더들
Assets : 유니티 프로젝트에서 사용할 애셋이 포함되는 메인 폴더
일반적인 기능들은 에셋 폴더에 있다고 가정하기에 따로 경로를 알려줄 필요가 없음.
기본적으로 제공되는 폴더여서 따로 만들 필요는 없음.

Editor : 해당 폴더에 존재하는 스크립트는 에디터 전용 스크립트로 취급됩니다.
Plugins : C/C++ 기반으로 작성되는 native dll 파일을 배치하는 폴더 
위 두 폴더는 보통 플러그인 연동 작업 진행 시 별도로 만들 필요없이 만들어진 것들을 그냥 사용하면 되기에 폴더 생성을
따로 할 상황이 크게 많이 없음.

Resources
Streaming Assets :  ios 동영상 파일





























